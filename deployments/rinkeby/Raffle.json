{
  "address": "0x6CFB1c5FcCB9D1A0C298b663bF9DbDeeC2f38Df0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFees",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NOT_ENOUGH_ENTRANCE_FEE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfba6d8290ad5881c51dd71abf3f52b569429bfc3b55140acb13614ccc054f088",
  "receipt": {
    "to": null,
    "from": "0x8a92D9e123b95286F8245dFaD53C3F9E54c6A340",
    "contractAddress": "0x6CFB1c5FcCB9D1A0C298b663bF9DbDeeC2f38Df0",
    "transactionIndex": 13,
    "gasUsed": "1144735",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x62ae545c61e0dc726e0a9b627f126e8e7ab1e9b452aea0b767b5b1184f610c52",
    "transactionHash": "0xfba6d8290ad5881c51dd71abf3f52b569429bfc3b55140acb13614ccc054f088",
    "logs": [],
    "blockNumber": 10953823,
    "cumulativeGasUsed": "3149094",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "7660",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "30",
    "5000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "eeb5996d901621096b8c35fc6a875492",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NOT_ENOUGH_ENTRANCE_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\n\\r\\nerror Raffle__NOT_ENOUGH_ENTRANCE_FEE();\\r\\nerror  Raffle__TransferFailed();\\r\\nerror  Raffle__RaffleNotOpen();\\r\\nerror Raffle__UpkeepNotNeeded();\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2,KeeperCompatibleInterface {\\r\\n    // type declarations\\r\\n    enum RaffleState {\\r\\n          OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    // state variables\\r\\n    //Chainlink variables\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    bytes32  immutable private i_gasLane;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n\\r\\n    // contract variables\\r\\n    address  payable[] private s_players;\\r\\n    uint256  immutable private i_entranceFees;\\r\\n    address  payable private s_recentWinner;\\r\\n    uint256  immutable private i_interval;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    RaffleState private s_raffleState;\\r\\n\\r\\n    // events\\r\\n      event RaffleEnter(address indexed player);\\r\\n      event WinnerPicked(address indexed player);\\r\\n      event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n\\r\\n    // constructor\\r\\n    constructor(\\r\\n        uint256 entranceFees, \\r\\n        address vrfCoordinator,\\r\\n        uint64 subscriptionId,\\r\\n        bytes32 gasLane, // keyHash\\r\\n        uint256 interval,\\r\\n        uint32 callbackGasLimit\\r\\n    )  VRFConsumerBaseV2(vrfCoordinator){\\r\\n        i_entranceFees = entranceFees;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\\r\\n        i_gasLane = gasLane; \\r\\n        i_interval = interval;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n    }\\r\\n\\r\\n    // functons\\r\\n\\r\\n    // ENTER RAFFLE\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_entranceFees){\\r\\n            revert Raffle__NOT_ENOUGH_ENTRANCE_FEE();\\r\\n        }\\r\\n         if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__RaffleNotOpen();\\r\\n        }\\r\\n        //    push players in an array\\r\\n        s_players.push(payable(msg.sender));\\r\\n        // emit the entered player for the frontend\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n       \\r\\n    //    chainlink keepers\\r\\n    function checkUpkeep(bytes memory /* checkData */) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\\r\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\r\\n        bool isOpen =   RaffleState.OPEN == s_raffleState ;\\r\\n        bool hasPlayers  = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //  RANDOM NUMBER (2 functions)\\r\\n\\r\\n function performUpkeep(bytes calldata /* performData */) external override  {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n       if (!upkeepNeeded){\\r\\n        revert Raffle__UpkeepNotNeeded();\\r\\n       }\\r\\n      s_raffleState = RaffleState.CALCULATING;\\r\\n      uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n          i_gasLane,\\r\\n          i_subscriptionId,\\r\\n          REQUEST_CONFIRMATIONS,\\r\\n          i_callbackGasLimit,\\r\\n          NUM_WORDS\\r\\n        );\\r\\n         emit RequestedRaffleWinner(requestId); // redundant and does not do anything\\r\\n  }\\r\\n    \\r\\n    // get  random number in array and pick a winner\\r\\n   function fulfillRandomWords(\\r\\n    uint256, /* requestId */\\r\\n    uint256[] memory randomWords\\r\\n  ) internal override {\\r\\n    uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n    address payable recentWinner = s_players[indexOfWinner];\\r\\n    s_recentWinner = recentWinner;\\r\\n     s_raffleState = RaffleState.OPEN;\\r\\n    // s_lastTimeStamp = block.timestamp;\\r\\n\\r\\n    s_players = new address payable[](0);\\r\\n    (bool  success,  ) = s_recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n\\r\\n    if (!success){\\r\\n        revert  Raffle__TransferFailed();\\r\\n    }\\r\\n\\r\\n      emit WinnerPicked(recentWinner);\\r\\n\\r\\n  }\\r\\n\\r\\n    // view / pure functions\\r\\n\\r\\n    //  get  a specific player\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    // get winner\\r\\n    function getWinner() public  view  returns(address){\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n    // get entrance fee\\r\\n    function getEntranceFee () public view returns(uint256){\\r\\n        return i_entranceFees;\\r\\n    }\\r\\n    // get raffle state\\r\\n    function getRaffleState() public view  returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n    // get interval\\r\\n    function getInterval  () public view returns (uint256){\\r\\n        return i_interval;\\r\\n    }\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0xe94b9e39cabd0f7fcb996bce62769a8e99e298251e7f1ea0180cccc7e932e7c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200170a3803806200170a8339818101604052810190620000389190620001ad565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508561012081815250508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260e081815250508161014081815250508367ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250506000600360006101000a81548160ff021916908360018111156200010a5762000109620002b5565b5b0217905550426002819055508063ffffffff166101008163ffffffff1660e01b815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a0162000168565b9650506020620001f089828a016200013a565b95505060406200020389828a0162000196565b94505060606200021689828a0162000151565b93505060806200022989828a0162000168565b92505060a06200023c89828a016200017f565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160601c60c05160c01c60e0516101005160e01c6101205161014051611323620003e76000396000818161064f015261075d015260008181610212015261030f0152600061057f0152600061053b0152600061055c015260006104ff01526000818161024f01526102a301526113236000f3fe6080604052600436106100865760003560e01c80634585e33b116100595780634585e33b146101145780636e04ff0d1461013d5780638e7ea5b21461017b57806391ad27b4146101a6578063e55ae4e8146101d157610086565b806309bc33a71461008b578063115cbaf5146100b65780631fe543e3146100e15780632cfcc5391461010a575b600080fd5b34801561009757600080fd5b506100a061020e565b6040516100ad9190610f60565b60405180910390f35b3480156100c257600080fd5b506100cb610236565b6040516100d89190610f45565b60405180910390f35b3480156100ed57600080fd5b5061010860048036038101906101039190610d39565b61024d565b005b61011261030d565b005b34801561012057600080fd5b5061013b60048036038101906101369190610c49565b61047c565b005b34801561014957600080fd5b50610164600480360381019061015f9190610c96565b610647565b604051610172929190610ec2565b60405180910390f35b34801561018757600080fd5b5061019061072f565b60405161019d9190610e7e565b60405180910390f35b3480156101b257600080fd5b506101bb610759565b6040516101c89190610f60565b60405180910390f35b3480156101dd57600080fd5b506101f860048036038101906101f39190610cdf565b610781565b6040516102059190610e7e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ff57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102f6929190610e99565b60405180910390fd5b61030982826107c8565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610367576040517f2158888000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561037b5761037a611203565b5b600360009054906101000a900460ff16600181111561039d5761039c611203565b5b146103d4576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061049660405180602001604052806000815250610647565b509050806104d0576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360006101000a81548160ff021916908360018111156104f6576104f5611203565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105c0959493929190610ef2565b602060405180830381600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106129190610d0c565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006002544261067c9190611024565b1190506000600360009054906101000a900460ff1660018111156106a3576106a2611203565b5b600060018111156106b7576106b6611203565b5b149050600080600080549050119050600080471190508380156106d75750825b80156106e05750805b80156106e95750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061079657610795611232565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106107e3576107e2611232565b5b60200260200101516107f59190611174565b9050600080828154811061080c5761080b611232565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff021916908360018111156108a05761089f611203565b5b0217905550600067ffffffffffffffff8111156108c0576108bf611261565b5b6040519080825280602002602001820160405280156108ee5781602001602082028036833780820191505090505b5060009080519060200190610904929190610a14565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161094d90610e69565b60006040518083038185875af1925050503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b50509050806109ca576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610a8d579160200282015b82811115610a8c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a34565b5b509050610a9a9190610a9e565b5090565b5b80821115610ab7576000816000905550600101610a9f565b5090565b6000610ace610ac984610fa0565b610f7b565b90508083825260208201905082856020860282011115610af157610af061129a565b5b60005b85811015610b215781610b078882610c1f565b845260208401935060208301925050600181019050610af4565b5050509392505050565b6000610b3e610b3984610fcc565b610f7b565b905082815260208101848484011115610b5a57610b5961129f565b5b610b65848285611101565b509392505050565b600082601f830112610b8257610b81611295565b5b8135610b92848260208601610abb565b91505092915050565b60008083601f840112610bb157610bb0611295565b5b8235905067ffffffffffffffff811115610bce57610bcd611290565b5b602083019150836001820283011115610bea57610be961129a565b5b9250929050565b600082601f830112610c0657610c05611295565b5b8135610c16848260208601610b2b565b91505092915050565b600081359050610c2e816112d6565b92915050565b600081519050610c43816112d6565b92915050565b60008060208385031215610c6057610c5f6112a9565b5b600083013567ffffffffffffffff811115610c7e57610c7d6112a4565b5b610c8a85828601610b9b565b92509250509250929050565b600060208284031215610cac57610cab6112a9565b5b600082013567ffffffffffffffff811115610cca57610cc96112a4565b5b610cd684828501610bf1565b91505092915050565b600060208284031215610cf557610cf46112a9565b5b6000610d0384828501610c1f565b91505092915050565b600060208284031215610d2257610d216112a9565b5b6000610d3084828501610c34565b91505092915050565b60008060408385031215610d5057610d4f6112a9565b5b6000610d5e85828601610c1f565b925050602083013567ffffffffffffffff811115610d7f57610d7e6112a4565b5b610d8b85828601610b6d565b9150509250929050565b610d9e81611058565b82525050565b610dad8161106a565b82525050565b610dbc81611076565b82525050565b6000610dcd82610ffd565b610dd78185611008565b9350610de7818560208601611110565b610df0816112ae565b840191505092915050565b610e04816110ef565b82525050565b6000610e17600083611019565b9150610e22826112bf565b600082019050919050565b610e3681611093565b82525050565b610e45816110c1565b82525050565b610e54816110cb565b82525050565b610e63816110db565b82525050565b6000610e7482610e0a565b9150819050919050565b6000602082019050610e936000830184610d95565b92915050565b6000604082019050610eae6000830185610d95565b610ebb6020830184610d95565b9392505050565b6000604082019050610ed76000830185610da4565b8181036020830152610ee98184610dc2565b90509392505050565b600060a082019050610f076000830188610db3565b610f146020830187610e5a565b610f216040830186610e2d565b610f2e6060830185610e4b565b610f3b6080830184610e4b565b9695505050505050565b6000602082019050610f5a6000830184610dfb565b92915050565b6000602082019050610f756000830184610e3c565b92915050565b6000610f85610f96565b9050610f918282611143565b919050565b6000604051905090565b600067ffffffffffffffff821115610fbb57610fba611261565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610fe757610fe6611261565b5b610ff0826112ae565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061102f826110c1565b915061103a836110c1565b92508282101561104d5761104c6111a5565b5b828203905092915050565b6000611063826110a1565b9050919050565b60008115159050919050565b6000819050919050565b600081905061108e826112c2565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006110fa82611080565b9050919050565b82818337600083830152505050565b60005b8381101561112e578082015181840152602081019050611113565b8381111561113d576000848401525b50505050565b61114c826112ae565b810181811067ffffffffffffffff8211171561116b5761116a611261565b5b80604052505050565b600061117f826110c1565b915061118a836110c1565b92508261119a576111996111d4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106112d3576112d2611203565b5b50565b6112df816110c1565b81146112ea57600080fd5b5056fea264697066735822122028af0ca07318b28c97d72201b526a089dc7ad1cd5417f2024bc0c3504eebdcd364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80634585e33b116100595780634585e33b146101145780636e04ff0d1461013d5780638e7ea5b21461017b57806391ad27b4146101a6578063e55ae4e8146101d157610086565b806309bc33a71461008b578063115cbaf5146100b65780631fe543e3146100e15780632cfcc5391461010a575b600080fd5b34801561009757600080fd5b506100a061020e565b6040516100ad9190610f60565b60405180910390f35b3480156100c257600080fd5b506100cb610236565b6040516100d89190610f45565b60405180910390f35b3480156100ed57600080fd5b5061010860048036038101906101039190610d39565b61024d565b005b61011261030d565b005b34801561012057600080fd5b5061013b60048036038101906101369190610c49565b61047c565b005b34801561014957600080fd5b50610164600480360381019061015f9190610c96565b610647565b604051610172929190610ec2565b60405180910390f35b34801561018757600080fd5b5061019061072f565b60405161019d9190610e7e565b60405180910390f35b3480156101b257600080fd5b506101bb610759565b6040516101c89190610f60565b60405180910390f35b3480156101dd57600080fd5b506101f860048036038101906101f39190610cdf565b610781565b6040516102059190610e7e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ff57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102f6929190610e99565b60405180910390fd5b61030982826107c8565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610367576040517f2158888000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561037b5761037a611203565b5b600360009054906101000a900460ff16600181111561039d5761039c611203565b5b146103d4576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061049660405180602001604052806000815250610647565b509050806104d0576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360006101000a81548160ff021916908360018111156104f6576104f5611203565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105c0959493929190610ef2565b602060405180830381600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106129190610d0c565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006002544261067c9190611024565b1190506000600360009054906101000a900460ff1660018111156106a3576106a2611203565b5b600060018111156106b7576106b6611203565b5b149050600080600080549050119050600080471190508380156106d75750825b80156106e05750805b80156106e95750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061079657610795611232565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106107e3576107e2611232565b5b60200260200101516107f59190611174565b9050600080828154811061080c5761080b611232565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff021916908360018111156108a05761089f611203565b5b0217905550600067ffffffffffffffff8111156108c0576108bf611261565b5b6040519080825280602002602001820160405280156108ee5781602001602082028036833780820191505090505b5060009080519060200190610904929190610a14565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161094d90610e69565b60006040518083038185875af1925050503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b50509050806109ca576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610a8d579160200282015b82811115610a8c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a34565b5b509050610a9a9190610a9e565b5090565b5b80821115610ab7576000816000905550600101610a9f565b5090565b6000610ace610ac984610fa0565b610f7b565b90508083825260208201905082856020860282011115610af157610af061129a565b5b60005b85811015610b215781610b078882610c1f565b845260208401935060208301925050600181019050610af4565b5050509392505050565b6000610b3e610b3984610fcc565b610f7b565b905082815260208101848484011115610b5a57610b5961129f565b5b610b65848285611101565b509392505050565b600082601f830112610b8257610b81611295565b5b8135610b92848260208601610abb565b91505092915050565b60008083601f840112610bb157610bb0611295565b5b8235905067ffffffffffffffff811115610bce57610bcd611290565b5b602083019150836001820283011115610bea57610be961129a565b5b9250929050565b600082601f830112610c0657610c05611295565b5b8135610c16848260208601610b2b565b91505092915050565b600081359050610c2e816112d6565b92915050565b600081519050610c43816112d6565b92915050565b60008060208385031215610c6057610c5f6112a9565b5b600083013567ffffffffffffffff811115610c7e57610c7d6112a4565b5b610c8a85828601610b9b565b92509250509250929050565b600060208284031215610cac57610cab6112a9565b5b600082013567ffffffffffffffff811115610cca57610cc96112a4565b5b610cd684828501610bf1565b91505092915050565b600060208284031215610cf557610cf46112a9565b5b6000610d0384828501610c1f565b91505092915050565b600060208284031215610d2257610d216112a9565b5b6000610d3084828501610c34565b91505092915050565b60008060408385031215610d5057610d4f6112a9565b5b6000610d5e85828601610c1f565b925050602083013567ffffffffffffffff811115610d7f57610d7e6112a4565b5b610d8b85828601610b6d565b9150509250929050565b610d9e81611058565b82525050565b610dad8161106a565b82525050565b610dbc81611076565b82525050565b6000610dcd82610ffd565b610dd78185611008565b9350610de7818560208601611110565b610df0816112ae565b840191505092915050565b610e04816110ef565b82525050565b6000610e17600083611019565b9150610e22826112bf565b600082019050919050565b610e3681611093565b82525050565b610e45816110c1565b82525050565b610e54816110cb565b82525050565b610e63816110db565b82525050565b6000610e7482610e0a565b9150819050919050565b6000602082019050610e936000830184610d95565b92915050565b6000604082019050610eae6000830185610d95565b610ebb6020830184610d95565b9392505050565b6000604082019050610ed76000830185610da4565b8181036020830152610ee98184610dc2565b90509392505050565b600060a082019050610f076000830188610db3565b610f146020830187610e5a565b610f216040830186610e2d565b610f2e6060830185610e4b565b610f3b6080830184610e4b565b9695505050505050565b6000602082019050610f5a6000830184610dfb565b92915050565b6000602082019050610f756000830184610e3c565b92915050565b6000610f85610f96565b9050610f918282611143565b919050565b6000604051905090565b600067ffffffffffffffff821115610fbb57610fba611261565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610fe757610fe6611261565b5b610ff0826112ae565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061102f826110c1565b915061103a836110c1565b92508282101561104d5761104c6111a5565b5b828203905092915050565b6000611063826110a1565b9050919050565b60008115159050919050565b6000819050919050565b600081905061108e826112c2565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006110fa82611080565b9050919050565b82818337600083830152505050565b60005b8381101561112e578082015181840152602081019050611113565b8381111561113d576000848401525b50505050565b61114c826112ae565b810181811067ffffffffffffffff8211171561116b5761116a611261565b5b80604052505050565b600061117f826110c1565b915061118a836110c1565b92508261119a576111996111d4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106112d3576112d2611203565b5b50565b6112df816110c1565b81146112ea57600080fd5b5056fea264697066735822122028af0ca07318b28c97d72201b526a089dc7ad1cd5417f2024bc0c3504eebdcd364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 203,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 207,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 211,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 214,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(RaffleState)185"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)185": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}